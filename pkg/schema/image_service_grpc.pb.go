// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: image_service.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageService_StoreRawImage_FullMethodName = "/sequoia.ImageService/StoreRawImage"
	ImageService_LiveStream_FullMethodName    = "/sequoia.ImageService/LiveStream"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	StoreRawImage(ctx context.Context, in *StoreRawImageRequest, opts ...grpc.CallOption) (*StoreRawImageResponse, error)
	LiveStream(ctx context.Context, in *LiveStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LiveStreamResponse], error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) StoreRawImage(ctx context.Context, in *StoreRawImageRequest, opts ...grpc.CallOption) (*StoreRawImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreRawImageResponse)
	err := c.cc.Invoke(ctx, ImageService_StoreRawImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) LiveStream(ctx context.Context, in *LiveStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LiveStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageService_ServiceDesc.Streams[0], ImageService_LiveStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LiveStreamRequest, LiveStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_LiveStreamClient = grpc.ServerStreamingClient[LiveStreamResponse]

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility.
type ImageServiceServer interface {
	StoreRawImage(context.Context, *StoreRawImageRequest) (*StoreRawImageResponse, error)
	LiveStream(*LiveStreamRequest, grpc.ServerStreamingServer[LiveStreamResponse]) error
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageServiceServer struct{}

func (UnimplementedImageServiceServer) StoreRawImage(context.Context, *StoreRawImageRequest) (*StoreRawImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreRawImage not implemented")
}
func (UnimplementedImageServiceServer) LiveStream(*LiveStreamRequest, grpc.ServerStreamingServer[LiveStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LiveStream not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}
func (UnimplementedImageServiceServer) testEmbeddedByValue()                      {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_StoreRawImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRawImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).StoreRawImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_StoreRawImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).StoreRawImage(ctx, req.(*StoreRawImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_LiveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageServiceServer).LiveStream(m, &grpc.GenericServerStream[LiveStreamRequest, LiveStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageService_LiveStreamServer = grpc.ServerStreamingServer[LiveStreamResponse]

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequoia.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreRawImage",
			Handler:    _ImageService_StoreRawImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveStream",
			Handler:       _ImageService_LiveStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "image_service.proto",
}
